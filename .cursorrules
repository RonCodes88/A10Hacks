# ===============================
# AI Network Security Simulation - Cursor Rules
# ===============================

## Project Overview

This is an AI-powered network security simulation and visualization platform that generates realistic global network traffic, including normal and malicious patterns. The network is represented as a dynamic 3D graph (nodes = IPs/ports, edges = flows) on an interactive Earth globe.

**Core Capabilities:**
- Real-time global network traffic generation
- Multi-agent autonomous security system
- 3D interactive visualization using Three.js
- Attack detection, investigation, and mitigation
- Explainable AI decision-making

## Tech Stack

### Frontend
- **Framework**: Next.js 14+ (App Router, TypeScript)
- **3D Visualization**: Three.js
- **Styling**: Tailwind CSS
- **Interactive Globe**: Custom Earth component with GeoJSON rendering

### Backend
- **API Framework**: FastAPI (Python)
- **Agent Framework**: TBD (LangGraph, AutoGen, or custom)
- **Data Processing**: NetworkX for graph analysis
- **ML/AI**: Heavy-hitter detection, graph anomaly algorithms

### Data Flow
```
Network Traffic Generator → Graph Database → Agents → Visualization
                                ↓
                          Real-time Analysis
                                ↓
                    Detection → Investigation → Judgment → Mitigation
```

## Agent Architecture

### 1. DetectorAgent
**Role**: Identify suspicious network activity in real-time.

**Responsibilities:**
- Analyze network traffic using heavy-hitter detection algorithms
- Implement graph anomaly detection
- Flag abnormal IPs, ports, or traffic clusters
- Generate confidence scores for potential attacks

**Key Algorithms:**
- Count-Min Sketch for heavy hitters
- Graph-based anomaly detection (degree distribution, clustering coefficients)
- Statistical outlier detection (z-score, IQR)

**Output Format:**
```python
{
  "alert_id": "uuid",
  "timestamp": "iso_timestamp",
  "suspicious_ips": ["1.2.3.4", "5.6.7.8"],
  "anomaly_type": "ddos | port_scan | botnet_burst",
  "confidence": 0.85,
  "affected_nodes": [node_ids],
  "metrics": {
    "traffic_spike": 1500,
    "unusual_ports": [8080, 9000],
    "connection_rate": 300
  }
}
```

### 2. InvestigatorAgent
**Role**: Perform deep analysis on flagged network activity.

**Responsibilities:**
- Inspect suspicious nodes and edges in detail
- Determine specific attack type and pattern
- Trace attack origin and propagation path
- Provide detailed reports with evidence

**Analysis Methods:**
- Graph traversal for attack path reconstruction
- Temporal pattern analysis
- Behavioral profiling of source IPs
- Correlation with known attack signatures

**Output Format:**
```python
{
  "investigation_id": "uuid",
  "alert_id": "uuid",
  "attack_type": "DDoS | Port Scan | Botnet | Data Exfiltration",
  "severity": "low | medium | high | critical",
  "evidence": {
    "attack_pattern": "description",
    "affected_targets": ["targets"],
    "attack_duration": "duration",
    "geographic_origin": "country/region"
  },
  "recommendation": "block | throttle | monitor",
  "reasoning": "plain English explanation"
}
```

### 3. JudgeAgent
**Role**: Evaluate and arbitrate decisions from other agents.

**Responsibilities:**
- Aggregate findings from Detector and Investigator
- Decide whether mitigation should be applied automatically
- Assign confidence and risk scores
- Provide reasoning in plain English
- Handle false positive assessment

**Decision Framework:**
```python
{
  "judgment_id": "uuid",
  "verdict": "mitigate | monitor | dismiss",
  "confidence": 0.92,
  "risk_score": 8.5,  # 0-10 scale
  "false_positive_probability": 0.08,
  "reasoning": "Detailed explanation of decision",
  "mitigation_urgency": "immediate | scheduled | monitor",
  "dissenting_factors": ["factors that argue against action"]
}
```

### 4. MitigatorAgent
**Role**: Respond to confirmed attacks and reduce risk.

**Responsibilities:**
- Suggest or apply mitigation actions
- Track effectiveness of applied mitigations
- Adjust strategies based on attack evolution
- Minimize collateral damage (false blocks)

**Mitigation Actions:**
- `block_ip`: Completely block source IP
- `rate_limit`: Throttle traffic from source
- `geo_block`: Block traffic from region
- `port_filter`: Block specific ports
- `traffic_shaping`: Prioritize legitimate traffic
- `alert_admin`: Notify human operators

**Output Format:**
```python
{
  "mitigation_id": "uuid",
  "judgment_id": "uuid",
  "actions_taken": [
    {
      "action_type": "block_ip",
      "target": "1.2.3.4",
      "duration": "1h | permanent",
      "timestamp": "iso_timestamp"
    }
  ],
  "effectiveness": {
    "traffic_reduced": "85%",
    "attack_stopped": true,
    "collateral_damage": "none"
  },
  "status": "active | completed | failed"
}
```

### 5. MonitorAgent
**Role**: Summarize network state and agent activity.

**Responsibilities:**
- Translate logs and events into plain-English summaries
- Highlight trends, critical nodes, and abnormal patterns
- Visualize agent decisions and network health
- Generate periodic reports

**Monitoring Outputs:**
- Real-time dashboard updates
- Plain English summaries for non-technical users
- Trend analysis and predictions
- Agent performance metrics

**Summary Format:**
```python
{
  "summary_id": "uuid",
  "time_period": "last_hour | last_24h | last_week",
  "overview": "Plain English summary",
  "key_events": [
    "DDoS attack from Eastern Europe blocked at 14:32",
    "Port scan detected and investigated, deemed low risk"
  ],
  "network_health": {
    "status": "healthy | degraded | under_attack",
    "active_threats": 2,
    "mitigations_active": 5,
    "traffic_volume": "normal | elevated | critical"
  },
  "agent_activity": {
    "detections": 45,
    "investigations": 12,
    "mitigations": 3,
    "false_positives": 2
  }
}
```

### 6. OrchestratorAgent
**Role**: Coordinate multi-agent workflow and maintain system integrity.

**Responsibilities:**
- Ensure agents interact correctly without conflicts
- Trigger agent actions in sequence or parallel
- Maintain simulation infrastructure
- Handle scaling and performance optimization
- Manage agent communication and state

**Workflow Patterns:**
```
Sequential: Detector → Investigator → Judge → Mitigator
Parallel: Multiple Detectors analyzing different traffic segments
Conditional: Judge decision gates Mitigator action
Monitoring: Continuous MonitorAgent operation
```

## File Structure

```
/frontend
  /src
    /app
      page.tsx          # Main page with Earth visualization
      layout.tsx        # Root layout
    /components
      Earth.tsx         # 3D Earth component with network overlay
      NetworkGraph.tsx  # Network traffic visualization
      AgentDashboard.tsx # Real-time agent activity display
      AttackTimeline.tsx # Historical attack visualization
    /utils
      threeGeoJSON.ts   # GeoJSON → Three.js conversion
      networkGraph.ts   # Network graph utilities
      agentAPI.ts       # Backend agent communication
    /types
      agents.ts         # TypeScript types for agent messages
      network.ts        # Network data structures

/backend
  /agents
    detector.py         # DetectorAgent implementation
    investigator.py     # InvestigatorAgent implementation
    judge.py           # JudgeAgent implementation
    mitigator.py       # MitigatorAgent implementation
    monitor.py         # MonitorAgent implementation
    orchestrator.py    # OrchestratorAgent implementation
  /network
    traffic_generator.py # Network traffic simulation
    graph_manager.py    # Network graph operations
    geo_mapper.py       # IP geolocation
  /algorithms
    heavy_hitter.py     # Heavy-hitter detection
    anomaly_detection.py # Graph anomaly algorithms
    attack_patterns.py  # Known attack signatures
  main.py              # FastAPI server
  requirements.txt     # Python dependencies
```

## Data Models

### Network Node
```python
{
  "node_id": "uuid",
  "ip_address": "1.2.3.4",
  "port": 80,
  "location": {
    "latitude": 40.7128,
    "longitude": -74.0060,
    "country": "United States",
    "city": "New York"
  },
  "node_type": "server | client | gateway",
  "reputation_score": 0.95,
  "is_suspicious": false
}
```

### Network Edge (Traffic Flow)
```python
{
  "edge_id": "uuid",
  "source_node": "node_id",
  "target_node": "node_id",
  "protocol": "TCP | UDP | HTTP | HTTPS",
  "packet_count": 1500,
  "bytes_transferred": 1048576,
  "timestamp": "iso_timestamp",
  "duration": "seconds",
  "is_anomalous": false,
  "anomaly_score": 0.15
}
```

### Attack Event
```python
{
  "attack_id": "uuid",
  "attack_type": "DDoS | Port Scan | Botnet | SQL Injection | Data Exfiltration",
  "start_time": "iso_timestamp",
  "end_time": "iso_timestamp | null",
  "source_ips": ["ips"],
  "target_ips": ["ips"],
  "severity": "low | medium | high | critical",
  "status": "detected | investigating | mitigated | ongoing",
  "agent_chain": [
    {"agent": "Detector", "timestamp": "iso", "action": "flagged"},
    {"agent": "Investigator", "timestamp": "iso", "action": "confirmed"},
    {"agent": "Judge", "timestamp": "iso", "action": "approved_mitigation"},
    {"agent": "Mitigator", "timestamp": "iso", "action": "ip_blocked"}
  ]
}
```

## Visualization Conventions

### Color Coding
- **Normal Traffic**: Green (`#00ff00`)
- **Suspicious Activity**: Yellow (`#ffff00`)
- **Confirmed Attack**: Red (`#ff0000`)
- **Mitigated/Blocked**: Orange (`#ff8800`)
- **Agent Detection Zone**: Cyan (`#00ffff`)

### Node Sizes
- Small: Low traffic volume
- Medium: Normal traffic volume
- Large: High traffic volume or critical infrastructure
- Pulsing: Currently under investigation

### Edge Styles
- Solid line: Normal traffic flow
- Dashed line: Suspicious traffic
- Thick red line: Active attack
- Fading animation: Mitigated traffic

### Geographic Overlay
- Country borders highlight on hover
- Attack origin → target curved arcs
- Concentration heat maps for traffic density

## API Endpoints

### Traffic Data
```
GET  /api/network/traffic         # Real-time traffic snapshot
GET  /api/network/nodes            # All network nodes
GET  /api/network/edges            # All traffic flows
POST /api/network/simulate         # Trigger attack simulation
```

### Agent Endpoints
```
GET  /api/agents/status            # All agent statuses
GET  /api/agents/detector/alerts   # Recent detections
GET  /api/agents/judge/decisions   # Recent judgments
POST /api/agents/mitigate          # Trigger manual mitigation
```

### Historical Data
```
GET  /api/history/attacks          # Past attack events
GET  /api/history/mitigations      # Mitigation history
GET  /api/analytics/trends         # Traffic trends
```

### WebSocket
```
WS   /ws/network                   # Real-time network updates
WS   /ws/agents                    # Real-time agent activity
```

## Development Guidelines

### Agent Communication
- Use structured message formats (JSON)
- Include timestamps and trace IDs
- Log all inter-agent communications
- Implement retry logic for failed messages

### Error Handling
- Agents should gracefully handle unexpected input
- Provide fallback decisions if confidence is low
- Log all errors with context
- Never crash the entire system due to one agent failure

### Testing
- Unit tests for each agent's decision logic
- Integration tests for agent chains
- Simulation tests with known attack patterns
- Performance tests for real-time requirements

### Explainability
- Every agent decision must include reasoning
- Use plain English explanations
- Show confidence scores and uncertainty
- Provide audit trails for forensic analysis

## Attack Scenarios to Implement

1. **DDoS Attack**: Massive traffic from multiple sources to single target
2. **Port Scan**: Sequential probing of ports on multiple IPs
3. **Botnet Burst**: Coordinated activity from compromised nodes
4. **Data Exfiltration**: Unusual outbound traffic patterns
5. **SQL Injection**: Suspicious database query patterns
6. **Brute Force**: Repeated authentication attempts
7. **Man-in-the-Middle**: Traffic interception patterns
8. **Zero-Day**: Unknown attack pattern requiring ML detection

## Performance Targets

- **Detection Latency**: < 100ms
- **Investigation Time**: < 5 seconds
- **Mitigation Application**: < 1 second
- **Visualization FPS**: 60fps
- **Network Scale**: 10,000+ nodes, 100,000+ edges
- **Concurrent Attacks**: Handle 10+ simultaneous attacks

## Monitoring Metrics

- Agent response times
- Detection accuracy (precision/recall)
- False positive rate
- Mitigation effectiveness
- System resource usage
- User interaction patterns

## Future Enhancements

- Machine learning for unknown attack detection
- Adversarial testing (red team agent)
- Multi-region deployment simulation
- Historical replay and "what-if" scenarios
- Natural language query interface
- Integration with real threat intelligence feeds

## Notes for AI Assistants

- When implementing agents, prioritize explainability over pure performance
- Multi-agent coordination should prevent analysis paralysis
- Visualization should update in real-time without blocking
- Security decisions should err on the side of caution
- User interface should make complex operations intuitive
- All agent reasoning should be auditable and reversible
- Performance matters - this runs in real-time
- The Earth visualization is the primary interface - maintain its smoothness

## Common Patterns

### Agent Decision Chain
```python
# 1. Detector flags anomaly
detection = detector.analyze(traffic)

# 2. Investigator examines if confidence > threshold
if detection.confidence > 0.7:
    investigation = investigator.investigate(detection)
    
    # 3. Judge evaluates
    judgment = judge.evaluate(detection, investigation)
    
    # 4. Mitigator acts if approved
    if judgment.verdict == "mitigate":
        mitigation = mitigator.execute(judgment)
        
        # 5. Monitor summarizes
        monitor.log_event(detection, investigation, judgment, mitigation)
```

### Visualization Update
```typescript
// Real-time network state updates
websocket.on('network_update', (data) => {
  updateNodes(data.nodes);
  updateEdges(data.edges);
  highlightAnomalies(data.anomalies);
  updateAgentStatus(data.agent_activity);
});
```

---

**Remember**: This is a simulation for education and demonstration. Focus on making agent reasoning transparent, decisions explainable, and visualizations intuitive.

